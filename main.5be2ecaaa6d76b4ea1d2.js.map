{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAOMA,EAAQ,SAAAC,GAEZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAIvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfXK,EAAQ,CAAC,CACXC,KAAM,QACNC,QAAQ,GAEV,CACED,KAAM,OACNC,QAAQ,GAEV,CACED,KAAM,OACNC,QAAQ,GAEV,CACED,KAAM,MACNC,QAAQ,IAINC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAACC,GAClBA,EAAQW,EAASE,KAAI,SAAAC,GAAI,OACrBA,EAAKN,OAASI,EAAd,iBACKE,EADL,CAEEL,QAASK,EAAKL,SACZK,UAQNZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC7CnC,IAIMe,EAAkB,SAACC,GACvB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlDnB,YAAW,WACUqB,KAAKE,SAAW,GAGjCxB,EAAQ,CACNyB,GAAIP,EAAYO,GAChBtB,KAAMN,IAGRsB,EAAOD,EAAYO,MAEpB5B,OAID6B,EAAa,SAAC,GAGd,IAFJD,EAEI,EAFJA,GACAtB,EACI,EADJA,KAEAC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,QAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,+BAaFR,EAAgB,CACZQ,GAAI,GACJI,OAAQ,MAETvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CACZQ,GAAI,GACJI,OAAQ,MAETvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CACZQ,GAAI,GACJI,OAAQ,KAETvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CACZQ,GAAI,GACJI,OAAQ,MAETvB,KAAKoB,GACLI,MAAMH,K","file":"main.5be2ecaaa6d76b4ea1d2.js","sourcesContent":["/**\r\n * Напиши функцию delay(ms), которая возвращает промис, \r\n * переходящий в состояние \"resolved\" через ms миллисекунд. \r\n * Значением исполнившегося промиса должно\r\n *  быть то кол-во миллисекунд которое передали во время вызова функции delay. \r\n */\r\n\r\nconst delay = ms => {\r\n\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","/**\r\n * Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n *  а принимала всего два параметра allUsers и userName и возвращала промис.\r\n */\r\n\r\n\r\n\r\nconst users = [{\r\n    name: 'Mango',\r\n    active: true\r\n  },\r\n  {\r\n    name: 'Poly',\r\n    active: false\r\n  },\r\n  {\r\n    name: 'Ajax',\r\n    active: true\r\n  },\r\n  {\r\n    name: 'Lux',\r\n    active: false\r\n  },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve) => {\r\n    resolve(allUsers.map(user =>\r\n        user.name === userName ? {\r\n          ...user,\r\n          active: !user.active\r\n        } : user,\r\n      )\r\n\r\n    )\r\n  })\r\n\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n//   toggleUserState(users, 'Mango', logger);\r\n//   toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","/**\r\n * Перепиши функцию makeTransaction() так, \r\n * чтобы она не использовала callback-функции onSuccess и onError, \r\n * а принимала всего один параметр transaction и возвращала промис.\r\n */\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({\r\n          id: transaction.id,\r\n          time: delay\r\n        });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  })\r\n};\r\n\r\nconst logSuccess = ({\r\n  id,\r\n  time\r\n}) => {\r\n  console.log(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id} . Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n//   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n//   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n//   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n//   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({\r\n    id: 70,\r\n    amount: 150\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({\r\n    id: 71,\r\n    amount: 230\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({\r\n    id: 72,\r\n    amount: 75\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({\r\n    id: 73,\r\n    amount: 100\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"],"sourceRoot":""}